/*
 PureMVC ExtJS Javascript port by Tony DeFusco <tony.defusco@puremvc.org>
 PureMVC - Copyright(c) 2006-2011 Futurescale, Inc., Some rights reserved.
 Your reuse is governed by the Creative Commons Attribution 3.0 License
 */

Ext.namespace('Puremvc.test');

/**
 * @class Tests PureMVC Puremvc.patterns.Observer class.
 *
 * <P>
 * Since the <code>Observer</code> encapsulates the interested object's
 * callback information, there are no getters, only setters.
 * It is, in effect write-only memory.
 *
 * <P>
 * Therefore, the only way to test it is to set the
 * notification method and context and call the notifyObserver
 * method.
 *
 * @see Puremvc.patterns.Observer
 */
Puremvc.test.ObserverTest = new YUITest.TestCase(
/**
 * @lends Puremvc.test.ObserverTest.prototype
 */
{
  /**
   * The name of the test case - if not provided, one is automatically
   * generated by the YUITest framework.
   *
   * @type {String}
   * @private
   */
  name: "PureMVC Observer class tests",

  /**
   * Sets up data that is needed by each test.
   */
  setUp: function() {
  },

  /**
   * Cleans up everything that was created by setUp().
   */
  tearDown: function() {
  },

  /**
   * A test variable that proves the notify method was executed with
   * 'this' as its execution context.
   *
   * @type {Number}
   * @private
   */
  _observerTestVar: null,

  /**
   * Tests Puremvc.patterns.Observer class when initialized by accessor methods.
   */
  testObserverAccessors: function() {

    // Create Puremvc.patterns.Observer with null args, then
    // use accessors to set notification method and context.
    var observer/*Puremvc.patterns.Observer*/ = new Puremvc.patterns.Observer(null, null);
    observer.setNotifyContext(this);
    observer.setNotifyMethod(this.observerTestMethod);

    // Create a test event, setting a payload value and notify
    // the Puremvc.patterns.Observer with it. Since the Puremvc.patterns.Observer is this class
    // and the notification method is observerTestMethod,
    // successful notification will result in our local
    // observerTestVar being set to the value passed in
    // on the notification body.
    var note/*Puremvc.patterns.Notification*/ = new Puremvc.patterns.Notification('ObserverTestNote', 10);
    observer.notifyObserver(note);

    // Test assertions.
    YUITest.Assert.areEqual(
      10,
      this._observerTestVar,
      "Expecting observerTestVar = 10"
      );
  },

  /**
   * Tests Puremvc.patterns.Observer class when initialized by constructor.
   */
  testObserverConstructor: function() {
    // Create Puremvc.patterns.Observer passing in notification method and context.
    var observer/*Puremvc.patterns.Observer*/ = new Puremvc.patterns.Observer(this.observerTestMethod, this);

    // Create a test note, setting a body value and notify
    // the Puremvc.patterns.Observer with it. Since the Puremvc.patterns.Observer is this class
    // and the notification method is observerTestMethod,
    // successful notification will result in our local
    // observerTestVar being set to the value we pass in
    // on the notification body.
    var note/*Puremvc.patterns.Notification*/ = new Puremvc.patterns.Notification('ObserverTestNote', 5);
    observer.notifyObserver(note);

    // Test assertions.
    YUITest.Assert.areEqual(
      5,
      this._observerTestVar,
      "Expecting observerTestVar == 5"
      );
  },

  /**
   * Tests the compareNotifyContext method of the Puremvc.patterns.Observer class.
   */
  testCompareNotifyContext: function() {
    // Create Puremvc.patterns.Observer passing in notification method and context.
    var observer/*Puremvc.patterns.Observer*/ = new Puremvc.patterns.Observer(this.observerTestMethod, this);

    var negTestObj/*Object*/ = new Object();

    // Test assertions.
    YUITest.Assert.isFalse(
      observer.compareNotifyContext(negTestObj),
      "Expecting observer.compareNotifyContext(negTestObj) == false"
      );

    YUITest.Assert.isTrue(
      observer.compareNotifyContext(this),
      "Expecting observer.compareNotifyContext(this) == true"
      );
  },

  /**
   * A function that is used as the Puremvc.patterns.Observer notification method.
   *
   * @private
   */
  observerTestMethod: function(note/*Puremvc.patterns.Notification*/) {
    this._observerTestVar = note.getBody();
  }
});

Alias('Puremvc.test.ObserverTest');
