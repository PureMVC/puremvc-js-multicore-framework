/*
 PureMVC ExtJS Javascript port by Tony DeFusco <tony.defusco@puremvc.org>
 PureMVC - Copyright(c) 2006-2011 Futurescale, Inc., Some rights reserved.
 Your reuse is governed by the Creative Commons Attribution 3.0 License
 */

Ext.namespace('Puremvc.test');

/**
 * @class Test the PureMVC Proxy class.
 *
 * @see Puremvc.patterns.Proxy
 */
Puremvc.test.ProxyTest = new YUITest.TestCase(
/**
 * @lends Puremvc.test.ProxyTest.prototype
 */
{
  /**
   * The name of the test case - if not provided, one is automatically
   * generated by the YUITest framework.
   *
   * @type {String}
   * @private
   */
  name: "PureMVC Proxy class tests",

  /**
   * Sets up data that is needed by each test.
   */
  setUp: function() {
  },

  /**
   * Cleans up everything that was created by setUp().
   */
  tearDown: function() {
  },

  /**
   * Tests if constructing the <code>Puremvc.patterns.Proxy</code> also call its super by testing
   * for the existence of its <code>Puremvc.test.Notifier</code> superclass Puremvc.patterns.Facade.
   * instance.
   */
  testSuperclassConstructor: function() {
    // Create a new subclass of Puremvc.patterns.Notifier and verify that its Puremvc.patterns.Facade
    // has well been created.
    var proxyTestSub/*Puremvc.test.ProxyTestSub*/ = new ProxyTestSub();

    // Test assertions.
    YUITest.Assert.isTrue(
      proxyTestSub.hasFacade(),
      "Expecting proxyTestSub.hasFacade() === true"
      );
  },

  /**
   * Tests getting the name using the Puremvc.patterns.Proxy class accessor method. Setting it
   * can only be done in the constructor.
   */
  testNameAccessor: function() {
    // Create a new Puremvc.patterns.Proxy and use accessors to set its name.
    var proxy/*Puremvc.patterns.Proxy*/ = new Puremvc.patterns.Proxy('TestProxy');

    // Test assertions
    YUITest.Assert.areEqual(
      'TestProxy',
      proxy.getProxyName(),
      "Expecting proxy.getProxyName() == 'TestProxy'"
      );
  },

  /**
   * Tests setting and getting the data using Puremvc.patterns.Proxy class accessor methods.
   */
  testDataAccessors: function() {
    // Create a new Puremvc.patterns.Proxy and use accessors to set the data.
    var proxy/*Puremvc.patterns.Proxy*/ = new Puremvc.patterns.Proxy('colors');
    proxy.setData(['red', 'green', 'blue']);
    var data/*Array*/ = proxy.getData();

    // Test assertions.
    YUITest.Assert.areEqual(
      3,
      data.length,
      "Expecting data.length == 3"
      );

    YUITest.Assert.areEqual(
      'red',
      data[0],
      "Expecting data[0] == 'red'"
      );

    YUITest.Assert.areEqual(
      'green',
      data[1],
      "Expecting data[1] == 'green'"
      );

    YUITest.Assert.areEqual(
      'blue',
      data[2],
      "Expecting data[2] == 'blue'"
      );
  },

  /**
   * Tests setting the name and body using the Puremvc.patterns.Proxy class constructor.
   */
  testConstructor: function() {
    // Create a new Puremvc.patterns.Proxy using the constructor to set the name and data.
    var proxy/*Puremvc.patterns.Proxy*/ = new Puremvc.patterns.Proxy('colors', ['red', 'green', 'blue']);
    var data/*Array*/ = proxy.getData();

    // Test assertions
    YUITest.Assert.isNotNull(
      proxy,
      "Expecting proxy != null"
      );

    YUITest.Assert.areEqual(
      'colors',
      proxy.getProxyName(),
      "Expecting proxy.getProxyName() == 'colors'"
      );

    YUITest.Assert.areEqual(
      3,
      data.length,
      "Expecting data.length == 3"
      );

    YUITest.Assert.areEqual(
      'red',
      data[0],
      "Expecting data[0] == 'red'"
      );

    YUITest.Assert.areEqual(
      'green',
      data[1],
      "Expecting data[1] == 'green'"
      );

    YUITest.Assert.areEqual(
      'blue',
      data[2],
      "Expecting data[2] == 'blue'"
      );
  }
});

Alias('Puremvc.test.ProxyTest');
