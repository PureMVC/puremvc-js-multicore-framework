/*
 PureMVC ExtJS Javascript port by Tony DeFusco <tony.defusco@puremvc.org>
 PureMVC - Copyright(c) 2006-2011 Futurescale, Inc., Some rights reserved.
 Your reuse is governed by the Creative Commons Attribution 3.0 License
 */

Ext.namespace('Puremvc.test');

/**
 * @class Test the PureMVC Facade class.
 *
 * @see Puremvc.test.FacadeTestVO
 * @see Puremvc.test.FacadeTestCommand
 */
Puremvc.test.FacadeTest = new YUITest.TestCase(
/**
 * @lends Puremvc.test.FacadeTest.prototype
 */
{
  /**
   * The name of the test case - if not provided, one is automatically
   * generated by the YUITest framework.
   *
   * @type {String}
   * @private
   */
  name: "PureMVC Facade class tests",

  /**
   * Sets up data that is needed by each test.
   */
  setUp: function() {
  },

  /**
   * Cleans up everything that was created by setUp().
   */
  tearDown: function() {
  },

  /**
   * Tests the Facade Singleton Factory Method
   */
  testGetInstance: function() {
    // Test Factory Method
    var facade/*Puremvc.patterns.Facade*/ = Puremvc.patterns.Facade.getInstance();

    // Test assertions
    YUITest.Assert.isNotUndefined(
      facade,
      "Expecting instance not null"
      );

    YUITest.Assert.isInstanceOf(
      Puremvc.patterns.Facade,
      facade,
      "Expecting instance is instance of Facade"
      );
  },

  /**
   * Tests Puremvc.patterns.Command registration and execution via the Puremvc.patterns.Facade.
   *
   * <P>
   * This test gets the Singleton Facade instance
   * and registers the Puremvc.test.FacadeTestCommand class
   * to handle 'FacadeTest' Notifications.
   *
   * <P>
   * It then sends a notification using the Facade.
   * Success is determined by evaluating
   * a property on an object placed in the body of
   * the Puremvc.patterns.Notification, which will be modified by the Puremvc.patterns.Command.
   *
   */
  testRegisterCommandAndSendNotification: function() {
    // Create the Puremvc.patterns.Facade, register the Puremvc.test.FacadeTestCommand to
    // handle 'FacadeTest' notifications
    var facade/*Puremvc.patterns.Facade*/ = Puremvc.patterns.Facade.getInstance();
    facade.registerCommand('FacadeTestNote', FacadeTestCommand);

    // Send notification. The Puremvc.patterns.Command associated with the event
    // (FacadeTestCommand) will be invoked, and will multiply
    // the vo.input value by two and set the result on vo.result
    var vo/*FacadeTestVO*/ = new FacadeTestVO(32);
    facade.sendNotification('FacadeTestNote', vo);

    // Test assertions
    YUITest.Assert.areEqual(
      64,
      vo.result,
      "Expecting vo.result == 64"
      );
  },

  /**
   * Tests PureMvc.patterns.Command removal via the Puremvc.patterns.Facade.
   *
   * <P>
   * This test gets the Singleton Facade instance
   * and registers the Puremvc.test.FacadeTestCommand class
   * to handle 'FacadeTest' Notifcations. Then it removes the command.
   *
   * <P>
   * It then sends a Puremvc.patterns.Notification using the Puremvc.patterns.Facade.
   * Success is determined by evaluating a property on an object placed
   * in the body of the Puremvc.patterns.Notification, which will NOT be modified by the
   * Puremvc.patterns.Command.
   *
   */
  testRegisterAndRemoveCommandAndSendNotification: function() {
    // Create the Puremvc.patterns.Facade, register the Puremvc.test.FacadeTestCommand to
    // handle 'FacadeTest' events
    var facade/*Puremvc.patterns.Facade*/ = Puremvc.patterns.Facade.getInstance();
    facade.registerCommand('FacadeTestNote', FacadeTestCommand);
    facade.removeCommand('FacadeTestNote');

    // Send notification. The Puremvc.patterns.Command associated with the event
    // (Puremvc.test.FacadeTestCommand) will NOT be invoked, and will NOT multiply
    // the vo.input value by two.
    var vo/*Object*/ = new FacadeTestVO(32);
    facade.sendNotification('FacadeTestNote', vo);

    // Test assertions
    YUITest.Assert.areNotEqual(
      64,
      vo.result,
      "Expecting vo.result != 64"
      );
  },

  /**
   * Tests the registering and retrieving Puremvc.core.Model proxies via the Puremvc.patterns.Facade.
   *
   * <P>
   * Tests <code>registerProxy</code> and <code>retrieveProxy</code> in the same test.
   * These methods cannot currently be tested separately
   * in any meaningful way other than to show that the
   * methods do not throw exception when called. </P>
   */
  testRegisterAndRetrieveProxy: function() {
    // Register a Puremvc.patterns.Proxy and retrieve it.
    var facade/*Puremvc.patterns.Facade*/ = Puremvc.patterns.Facade.getInstance();
    facade.registerProxy(new Puremvc.patterns.Proxy('colors', ['red', 'green', 'blue']));

    var proxy/*Puremvc.patterns.Proxy*/ = facade.retrieveProxy('colors');

    YUITest.Assert.isInstanceOf(
      Puremvc.patterns.Proxy,
      proxy,
      "Expecting proxy is Proxy"
      );

    // Retrieve data from Puremvc.patterns.Proxy
    var data/*Array*/ = proxy.getData();

    // Test assertions
    YUITest.Assert.isNotUndefined(
      data,
      "Expecting data not null"
      );

    YUITest.Assert.isArray(
      data,
      "Expecting data is Array"
      );

    YUITest.Assert.areEqual(
      3,
      data.length,
      "Expecting data.length == 3"
      );

    YUITest.Assert.areEqual(
      'red',
      data[0],
      "Expecting data[0] == 'red'"
      );

    YUITest.Assert.areEqual(
      'green',
      data[1],
      "Expecting data[1] == 'green'"
      );

    YUITest.Assert.areEqual(
      'blue',
      data[2],
      "Expecting data[2] == 'blue'"
      );
  },

  /**
   * Tests the removal of Puremvc.patterns.Proxies via the Puremvc.patterns.Facade.
   */
  testRegisterAndRemoveProxy: function() {
    // Register a Puremvc.patterns.Proxy, remove it, then try to retrieve it.
    var facade/*Puremvc.patterns.Facade*/ = Puremvc.patterns.Facade.getInstance();
    var proxy/*Puremvc.patterns.Proxy*/ = new Puremvc.patterns.Proxy('sizes', ['7', '13', '21']);
    facade.registerProxy(proxy);

    // Remove the proxy
    var removedProxy/*Puremvc.patterns.Proxy*/ = facade.removeProxy('sizes');

    // Test assertions

    // Assert that we removed the appropriate Puremvc.patterns.Proxy
    YUITest.Assert.areEqual(
      'sizes',
      removedProxy ? removedProxy.getProxyName() : null,
      "Expecting removedProxy.getProxyName() == 'sizes'"
      );

    // Make sure we can no longer retrieve the Puremvc.patterns.Proxy from the Puremvc.core.Model
    proxy = facade.retrieveProxy('sizes');

    // Assert that the Puremvc.patterns.Proxy is no longer retrievable.
    YUITest.Assert.isNull(proxy, "Expecting proxy === null");
  },

  /**
   * Tests registering, retrieving and removing Puremvc.patterns.Mediators via the Puremvc.patterns.Facade.
   */
  testRegisterRetrieveAndRemoveMediator: function() {
    // Register a Puremvc.patterns.Mediator, remove it, then try to retrieve it
    var facade/*Puremvc.patterns.Facade*/ = Puremvc.patterns.Facade.getInstance();
    facade.registerMediator(new Puremvc.patterns.Mediator(Puremvc.patterns.Mediator.NAME, new Object()));

    // Retrieve the Puremvc.patterns.Mediator
    YUITest.Assert.isNotNull(
      facade.retrieveMediator(Puremvc.patterns.Mediator.NAME),
      "Expecting facade.retrieveMediator(Puremvc.patterns.Mediator.NAME) !== null"
      );

    // Remove the Puremvc.patterns.Mediator
    var removedMediator/*Puremvc.patterns.Mediator*/ = facade.removeMediator(Puremvc.patterns.Mediator.NAME);

    // Assert that we have removed the appropriate Puremvc.patterns.Mediator
    YUITest.Assert.areEqual(
      Puremvc.patterns.Mediator.NAME,
      removedMediator ? removedMediator.getMediatorName() : null,
      "Expecting removedMediator.getMediatorName() == Puremvc.patterns.Mediator.NAME"
      );

    // Assert that the Puremvc.patterns.Mediator is no longer retrievable
    YUITest.Assert.isNull(
      facade.retrieveMediator(Puremvc.patterns.Mediator.NAME),
      "Expecting facade.retrieveMediator(Puremvc.patterns.Mediator.NAME) === null)"
      );
  },

  /**
   * Tests the hasProxy Method
   */
  testHasProxy: function() {
    // Register a Puremvc.patterns.Proxy
    var facade/*Puremvc.patterns.Facade*/ = Puremvc.patterns.Facade.getInstance();
    facade.registerProxy(new Puremvc.patterns.Proxy('hasProxyTest', [1,2,3]));

    // Assert that the Puremvc.core.Model.hasProxy method returns true
    // for that Puremvc.patterns.Proxy name
    YUITest.Assert.isTrue(
      facade.hasProxy('hasProxyTest'),
      "Expecting facade.hasProxy('hasProxyTest') === true"
      );
  },

  /**
   * Tests the hasMediator Method
   */
  testHasMediator: function() {
    // Register a Puremvc.patterns.Mediator
    var facade/*Puremvc.patterns.Facade*/ = Puremvc.patterns.Facade.getInstance();
    facade.registerMediator(new Puremvc.patterns.Mediator('facadeHasMediatorTest', new Object()));

    // Assert that the Puremvc.patterns.Facade.hasMediator method returns true
    // for that Puremvc.patterns.Mediator name
    YUITest.Assert.isTrue(
      facade.hasMediator('facadeHasMediatorTest'),
      "Expecting facade.hasMediator('facadeHasMediatorTest') === true"
      );

    facade.removeMediator('facadeHasMediatorTest');

    // Assert that the Puremvc.patterns.Facade.hasMediator method returns false
    // for that Puremvc.patterns.Mediator name
    YUITest.Assert.isFalse(
      facade.hasMediator('facadeHasMediatorTest'),
      "Expecting facade.hasMediator('facadeHasMediatorTest') === false"
      );
  },

  /**
   * Test hasCommand method.
   */
  testHasCommand: function() {
    // Register the Puremvc.test.ControllerTestCommand to handle 'hasCommandTest' notifications.
    var facade/*Puremvc.patterns.Facade*/ = Puremvc.patterns.Facade.getInstance();
    facade.registerCommand('facadeHasCommandTest', FacadeTestCommand);

    // Test that hasCommand returns true for hasCommandTest notifications.
    YUITest.Assert.isTrue(
      facade.hasCommand('facadeHasCommandTest'),
      "Expecting facade.hasCommand('facadeHasCommandTest') === true"
      );

    // Remove the Puremvc.patterns.Command from the Puremvc.core.Controller.
    facade.removeCommand('facadeHasCommandTest');

    // Test that hasCommand returns false for hasCommandTest notifications.
    YUITest.Assert.isFalse(
      facade.hasCommand('facadeHasCommandTest'),
      "Expecting facade.hasCommand('facadeHasCommandTest') === false"
      );
  }
});

Alias('Puremvc.test.FacadeTest');
