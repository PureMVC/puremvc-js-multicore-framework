/*
 PureMVC ExtJS Javascript port by Tony DeFusco <tony.defusco@puremvc.org>
 PureMVC - Copyright(c) 2006-2011 Futurescale, Inc., Some rights reserved.
 Your reuse is governed by the Creative Commons Attribution 3.0 License
 */

Ext.namespace('Puremvc.test');

/**
 * @class Test the Puremvc.core.Controller class.
 *
 * @see Puremvc.test.ControllerTestVO
 * @see Puremvc.test.ControllerTestCommand
 */
Puremvc.test.ControllerTest = new YUITest.TestCase(
/**
 * @lends Puremvc.test.ControllerTest.prototype
 */
{
  /**
   * The name of the test case - if not provided, one is automatically
   * generated by the YUITest framework.
   *
   * @type {String}
   * @private
   */
  name: "PureMVC Controller class tests",

  /**
   * Sets up data that is needed by each test.
   */
  setUp: function() {
  },

  /**
   * Cleans up everything that was created by setUp().
   */
  tearDown: function() {
  },

  /**
   * Tests the Controller Singleton Factory Method
   */
  testGetInstance: function() {
    // Test Factory Method
    var controller/*Puremvc.core.Controller*/ = Puremvc.core.Controller.getInstance();

    // test assertions
    YUITest.Assert.isNotNull(
      controller,
      "Expecting instance !== null"
      );

    YUITest.Assert.isInstanceOf(
      Puremvc.core.Controller,
      controller,
      "Expecting instance extends Controller"
      );
  },

  /**
   * Tests Command registration and execution.
   *
   * <P>
   * This test gets the Singleton Puremvc.core.Controller instance
   * and registers the Puremvc.test.ControllerTestCommand class
   * to handle 'ControllerTest' Notifications.<P>
   *
   * <P>
   * It then constructs such a Puremvc.patterns.Notification and tells the
   * Puremvc.core.Controller to execute the associated Puremvc.patterns.Command.
   * Success is determined by evaluating a property
   * on an object passed to the Puremvc.patters.Command, which will
   * be modified when the Puremvc.patterns.Command executes.
   */
  testRegisterAndExecuteCommand: function() {
    // Create the controller, register the Puremvc.test.ControllerTestCommand to handle 'ControllerTest' notes
    var controller/*Puremvc.core.Controller*/ = Puremvc.core.Controller.getInstance();
    controller.registerCommand('ControllerTest', ControllerTestCommand);

    // Create a 'ControllerTest' note
    var vo/*Object*/ = new ControllerTestVO(12);
    var note/*Puremvc.patterns.Notification*/ = new Puremvc.patterns.Notification('ControllerTest', vo);

    // Tell the controller to execute the Puremvc.patterns.Command associated with the note
    // the Puremvc.test.ControllerTestCommand invoked will multiply the vo.input value
    // by two and set the result on vo.result
    controller.executeCommand(note);

    // test assertions
    YUITest.Assert.areEqual(
      24,
      vo.result,
      "Expecting vo.result == 24"
      );
  },

  /**
   * Tests Puremvc.patterns.Command registration and removal.
   *
   * <P>
   * Tests that once a Puremvc.patterns.Command is registered and verified
   * working, it can be removed from the Puremvc.core.Controller.
   */
  testRegisterAndRemoveCommand: function() {
    // Create the controller, register the Puremvc.test.ControllerTestCommand to handle 'ControllerTest' notes
    var controller/*Puremvc.core.Controller*/ = Puremvc.core.Controller.getInstance();
    controller.registerCommand('ControllerRemoveTest', ControllerTestCommand);

    // Create a 'ControllerTest' note
    var vo/*Object*/ = new ControllerTestVO(12);
    var note/*Puremvc.patterns.Notification*/ = new Puremvc.patterns.Notification('ControllerRemoveTest', vo);

    // Tell the controller to execute the Puremvc.patterns.Command associated with the note
    // the Puremvc.test.ControllerTestCommand invoked will multiply the vo.input value
    // by two and set the result on vo.result
    controller.executeCommand(note);

    // test assertions
    YUITest.Assert.areEqual(
      24,
      vo.result,
      "Expecting vo.result == 24"
      );

    // Reset result
    vo.result = 0;

    // Remove the Puremvc.patterns.Command from the Puremvc.core.Controller
    controller.removeCommand('ControllerRemoveTest');

    // Tell the controller to execute the Puremvc.patterns.Command associated with the
    // note. This time, it should not be registered, and our vo result will not change.
    controller.executeCommand(note);

    // test assertions
    YUITest.Assert.areEqual(
      0,
      vo.result,
      "Expecting vo.result == 0"
      );
  },

  /**
   * Test hasCommand method.
   */
  testHasCommand: function() {
    // register the Puremvc.test.ControllerTestCommand to handle 'hasCommandTest' notes
    var controller/*Puremvc.core.Controller*/ = Puremvc.core.Controller.getInstance();
    controller.registerCommand('hasCommandTest', ControllerTestCommand);

    // test that hasCommand returns true for hasCommandTest notifications
    YUITest.Assert.isTrue(
      controller.hasCommand('hasCommandTest'),
      "Expecting controller.hasCommand('hasCommandTest') === true"
      );

    // Remove the Puremvc.patterns.Command from the Puremvc.core.Controller
    controller.removeCommand('hasCommandTest');

    // test that hasCommand returns false for hasCommandTest notifications
    YUITest.Assert.isFalse(
      controller.hasCommand('hasCommandTest'),
      "Expecting controller.hasCommand('hasCommandTest') === false"
      );
  },

  /**
   * Tests Removing and Reregistering a Puremvc.patterns.Command
   *
   * <P>
   * Tests that when a Puremvc.core.Command is re-registered that it isn't fired twice.
   * This involves, minimally, registration with the Puremvc.core.Controller but
   * notification via the Puremvc.core.View, rather than direct execution of
   * the Puremvc.core.Controller's executeCommand method as is done above in
   * testRegisterAndRemove. The bug under test was fixed in AS3 Standard
   * Version 2.0.2. If you run the unit tests with 2.0.1 this
   * test will fail.
   */
  testReregisterAndExecuteCommand: function() {
    // Fetch the Puremvc.core.Controller, register the Puremvc.test.ControllerTestCommand2 to
    // handle 'ControllerTest2' notes
    var controller/*Controller*/ = Puremvc.core.Controller.getInstance();
    controller.registerCommand('ControllerTest2', ControllerTestCommand2);

    // Remove the Puremvc.patterns.Command from the Puremvc.core.Controller
    controller.removeCommand('ControllerTest2');

    // Re-register the Puremvc.patterns.Command with the Puremvc.core.Controller
    controller.registerCommand('ControllerTest2', ControllerTestCommand2);

    // Create a 'ControllerTest2' note
    var vo/*Object*/ = new ControllerTestVO(12);
    var note/*Notification*/ = new Puremvc.patterns.Notification('ControllerTest2', vo);

    // Retrieve a reference to the Puremvc.core.View.
    var view/*View*/ = Puremvc.core.View.getInstance();

    // Send the Puremvc.patterns.Notification
    view.notifyObservers(note);

    // Test assertions -- if the command is executed once, then the value will be 24
    YUITest.Assert.areEqual(
      24,
      vo.result,
      "Expecting vo.result == 24"
      );

    // Prove that accumulation works in the VO by sending the notification again
    view.notifyObservers(note);

    // If the command is executed twice, then the value will be 48
    YUITest.Assert.areEqual(
      48,
      vo.result,
      "Expecting vo.result == 48"
      );
  }
});

Alias('Puremvc.test.ControllerTest');
