/*
 PureMVC ExtJS Javascript port by Tony DeFusco <tony.defusco@puremvc.org>
 PureMVC - Copyright(c) 2006-2011 Futurescale, Inc., Some rights reserved.
 Your reuse is governed by the Creative Commons Attribution 3.0 License
 */

Ext.namespace('Puremvc.test');

/**
 * @class Test the PureMVC Model class.
 *
 * @see Puremvc.core.Model
 */
Puremvc.test.ModelTest = new YUITest.TestCase(
/**
 * @lends Puremvc.test.ModelTest.prototype
 */
{
  /**
   * The name of the test case - if not provided, one is automatically
   * generated by the YUITest framework.
   *
   * @type {String}
   * @private
   */
  name: "PureMVC Model class tests",

  /**
   * Sets up data that is needed by each test.
   */
  setUp: function() {
  },

  /**
   * Cleans up everything that was created by setUp().
   */
  tearDown: function() {
  },

  /**
   * Tests the Puremvc.core.Model Singleton Factory Method.
   */
  testGetInstance: function() {
    // Test Factory Method
    var model/*Puremvc.core.Model*/ = Puremvc.core.Model.getInstance();

    // test assertions
    YUITest.Assert.isNotNull(
      model,
      "Expecting instance not null"
      );

    YUITest.Assert.isInstanceOf(
      Puremvc.core.Model,
      model,
      "Expecting instance extends Model"
      );
  },

  /**
   * Tests the proxy registration and retrieval methods.
   *
   * <P>
   * Tests <code>registerProxy</code> and <code>retrieveProxy</code> in
   * the same test. These methods cannot currently be tested separately
   * in any meaningful way other than to show that the methods do not
   * throw exceptions when called.
   */
  testRegisterAndRetrieveProxy: function() {
    // register a Puremvc.patterns.Proxy and retrieve it.
    var model/*Puremvc.core.Model*/ = Puremvc.core.Model.getInstance();
    model.registerProxy(new Puremvc.patterns.Proxy('colors', ['red', 'green', 'blue']));

    var proxy/*Puremvc.patterns.Proxy*/ = model.retrieveProxy('colors');
    var data/*Array*/ = proxy.getData();

    // test assertions
    YUITest.Assert.isNotNull(
      data,
      "Expecting data !== null"
      );

    YUITest.Assert.isArray(
      data,
      "Expecting data type is Array"
      );


    YUITest.Assert.areEqual(
      3,
      data.length,
      "Expecting data.length == 3"
      );

    YUITest.Assert.areEqual(
      'red',
      data[0],
      "Expecting data[0] == 'red'"
      );

    YUITest.Assert.areEqual(
      'green',
      data[1],
      "Expecting data[1] == 'green'"
      );

    YUITest.Assert.areEqual(
      'blue',
      data[2],
      "Expecting data[2] == 'blue'"
      );
  },

  /**
   * Tests the Puremvc.patterns.Proxy removal method.
   */
  testRegisterAndRemoveProxy: function() {
    // register a Puremvc.patterns.Proxy, remove it, then try to retrieve it
    var model/*Puremvc.core.Model*/ = Puremvc.core.Model.getInstance();
    var proxy/*Puremvc.patterns.Proxy*/ = new Puremvc.patterns.Proxy('sizes', ['7', '13', '21']);
    model.registerProxy(proxy);

    // remove the Puremvc.patterns.Proxy
    var removedProxy/*Puremvc.patterns.Proxy*/ = model.removeProxy('sizes');

    // assert that we removed the appropriate Puremvc.patterns.Proxy
    YUITest.Assert.areEqual(
      'sizes',
      removedProxy.getProxyName(),
      "Expecting removedProxy.getProxyName() == 'sizes'"
      );

    // ensure that the proxy is no longer retrievable from the model
    proxy = model.retrieveProxy('sizes');

    // test assertions
    YUITest.Assert.isNull(
      proxy,
      "Expecting proxy === null"
      );
  },

  /**
   * Tests the hasProxy Method.
   */
  testHasProxy: function() {
    // register a Puremvc.patterns.Proxy
    var model/*Puremvc.core.Model*/ = Puremvc.core.Model.getInstance();
    var proxy/*Puremvc.patterns.Proxy*/ = new Puremvc.patterns.Proxy('aces', [ 'clubs', 'spades', 'hearts', 'diamonds' ]);
    model.registerProxy(proxy);

    // assert that the model.hasProxy method returns true
    // for that Puremvc.patterns.Proxy name
    YUITest.Assert.isTrue(
      model.hasProxy('aces'),
      "Expecting model.hasProxy('aces') === true"
      );

    // remove the Puremvc.patterns.Proxy
    model.removeProxy('aces');

    // assert that the model.hasProxy method returns false
    // for that Puremvc.patterns.Proxy name.
    YUITest.Assert.isFalse(
      model.hasProxy('aces'),
      "Expecting model.hasProxy('aces') === false"
      );
  },

  /**
   * Tests that the Puremvc.core.Model calls the onRegister and onRemove methods.
   */
  testOnRegisterAndOnRemove: function() {
    // Get the Singleton Puremvc.core.View instance.
    var model/*Puremvc.core.Model*/ = Puremvc.core.Model.getInstance();

    // Create and register the test Puremvc.patterns.Mediator.
    var proxy/*Puremvc.patterns.Proxy*/ = new ModelTestProxy();
    model.registerProxy(proxy);

    // Assert that onRegister was called, and the Puremvc.patterns.Proxy responded by setting its data accordingly.
    YUITest.Assert.areEqual(
      ModelTestProxy.ON_REGISTER_CALLED,
      proxy.getData(),
      "Expecting proxy.getData() == ModelTestProxy.ON_REGISTER_CALLED"
      );

    // Remove the component.
    model.removeProxy(ModelTestProxy.NAME);

    // Assert that onRemove was called, and the Puremvc.patterns.Proxy responded by setting its data accordingly.
    YUITest.Assert.areEqual(
      ModelTestProxy.ON_REMOVE_CALLED,
      proxy.getData(),
      "Expecting proxy.getData() == ModelTestProxy.ON_REMOVE_CALLED"
      );
  }
});

Alias('Puremvc.test.ModelTest');
