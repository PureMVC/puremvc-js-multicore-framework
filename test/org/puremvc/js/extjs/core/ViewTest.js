/*
 PureMVC ExtJS Javascript port by Tony DeFusco <tony.defusco@puremvc.org>
 PureMVC - Copyright(c) 2006-2011 Futurescale, Inc., Some rights reserved.
 Your reuse is governed by the Creative Commons Attribution 3.0 License
 */

Ext.namespace('Puremvc.test');

/**
 * @class Test the PureMVC View class.
 */
Puremvc.test.ViewTest = new YUITest.TestCase(
/**
 * @lends Puremvc.test.ViewTest.prototype
 */
{
  /**
   * The name of the test case - if not provided, one is automatically
   * generated by the YUITest framework.
   *
   * @type {String}
   * @private
   */
  name: "PureMVC View class tests",

  /**
   * Sets up data that is needed by each test.
   */
  setUp: function() {
  },

  /**
   * Cleans up everything that was created by setUp().
   */
  tearDown: function() {
  },

  /**
   * @type {String}
   */
  lastNotification: null,

  /**
   * @type {Number}
   */
  counter: 0,

  /**
   * @type {Boolean}
   * @private
   */
  onRegisterCalled: false,

  /**
   * @type {Boolean}
   * @private
   */
  onRemoveCalled: false,

  /**
   * A test variable that proves the viewTestMethod was
   * invoked by the View.
   *
   * @type {Number}
   * @private
   */
  _viewTestVar: null,

  /**
   * Tests the View Singleton Factory Method
   */
  testGetInstance: function() {

    // Test Factory Method
    var view/*Puremvc.core.View*/ = Puremvc.core.View.getInstance();

    // Test assertions.
    YUITest.Assert.isNotNull(
      view,
      "Expecting instance !== null"
      );

    YUITest.Assert.isInstanceOf(
      Puremvc.core.View,
      view,
      "Expecting instance implements View"
      );
  },

  /**
   * Tests registration and notification of Puremvc.patterns.Observers.
   *
   * <P>
   * A Puremvc.patterns.Observer is created to callback the viewTestMethod of
   * this Puremvc.test.ViewTest instance. This Puremvc.patterns.Observer is registered with
   * the Puremvc.core.View to be notified of 'ViewTestEvent' events. Such
   * an event is created, and a value set on its payload. Then
   * the Puremvc.core.View is told to notify interested observers of this
   * Event.
   *
   * <P>
   * The Puremvc.core.View calls the Puremvc.patterns.Observer's notifyObserver method
   * which calls the viewTestMethod on this instance
   * of the Puremvc.test.ViewTest class. The viewTestMethod method will set
   * an instance variable to the value passed in on the Event
   * payload. The instance variable is evaluated to be sure
   * it is the same as that passed out as the payload of the
   * original 'ViewTestEvent'.
   *
   */
  testRegisterAndNotifyObserver: function() {
    // Get the Singleton Puremvc.core.View instance.
    var view/*Puremvc.core.View*/ = Puremvc.core.View.getInstance();

    // Create Puremvc.patterns.Observer, passing in notification method and context.
    var observer/*Puremvc.patterns.Observer*/ = new Puremvc.patterns.Observer(this.viewTestMethod, this);

    // Register Puremvc.patterns.Observer's interest in a particular Puremvc.patterns.Notification with the Puremvc.core.View.
    view.registerObserver(ViewTestNote.NAME, observer);

    // Create a Puremvc.test.ViewTestNote, setting
    // a body value, and tell the Puremvc.core.View to notify
    // Puremvc.patterns.Observers. Since the Puremvc.patterns.Observer is this class
    // and the notification method is viewTestMethod,
    // successful notification will result in our local
    // _viewTestVar being set to the value we pass in
    // on the note body.
    var note/*Puremvc.patterns.Notification*/ = ViewTestNote.create(10);
    view.notifyObservers(note);

    // Test assertions.
    YUITest.Assert.areEqual
      (
        10,
        this._viewTestVar,
        "Expecting viewTestVar = 10"
        );
  },

  /**
   * A utility method to test the Puremvc.patterns.Notification of Puremvc.patterns.Observers by the view.
   *
   * @param {Puremvc.patterns.Notification} note The notification to test.
   */
  viewTestMethod: function(note/*Puremvc.patterns.Notification*/) {
    // Set the local _viewTestVar to the number on the event payload
    this._viewTestVar = note.getBody();
  },

  /**
   * Tests registering and retrieving a Puremvc.patterns.Mediator with
   * the Puremvc.core.View.
   */
  testRegisterAndRetrieveMediator: function() {
    // Get the Singleton Puremvc.core.View instance.
    var view/*View*/ = Puremvc.core.View.getInstance();

    // Create and register the test Puremvc.patterns.Mediator
    var viewTestMediator/*Puremvc.test.ViewTestMediator*/ = new ViewTestMediator(this);
    view.registerMediator(viewTestMediator);

    // Retrieve the component.
    var mediator/*Puremvc.patterns.Mediator*/ = view.retrieveMediator(ViewTestMediator.NAME);

    // Test assertions.
    YUITest.Assert.isInstanceOf
      (
        ViewTestMediator,
        mediator,
        "Expecting comp is ViewTestMediator"
        );

    this.cleanup();

  },

  /**
   * Tests the hasMediator method.
   */
  testHasMediator: function() {
    // Register a Puremvc.patterns.Mediator
    var view/*Puremvc.core.View*/ = Puremvc.core.View.getInstance();

    // Create and register the test Puremvc.patterns.mediator
    var mediator/*Puremvc.patterns.Mediator*/ = new Puremvc.patterns.Mediator('hasMediatorTest', this);
    view.registerMediator(mediator);

    // Assert that the view.hasMediator method returns true
    // for that Puremvc.patterns.Mediator name.
    YUITest.Assert.isTrue(
      view.hasMediator('hasMediatorTest'),
      "Expecting view.hasMediator('hasMediatorTest') === true"
      );

    view.removeMediator('hasMediatorTest');

    // Assert that the view.hasMediator method returns false
    // for that Puremvc.patterns.Mediator name.
    YUITest.Assert.isFalse(
      view.hasMediator('hasMediatorTest'),
      "Expecting view.hasMediator('hasMediatorTest') === false"
      );
  },

  /**
   * Tests registering and removing a Puremvc.patterns.Mediator
   */
  testRegisterAndRemoveMediator: function() {
    // Get the Singleton Puremvc.patterns.View instance.
    var view/*View*/ = Puremvc.core.View.getInstance();

    // Create and register the test Puremvc.patterns.Mediator
    var mediator/*Puremvc.patterns.Mediator*/ = new Puremvc.patterns.Mediator('testing', this);
    view.registerMediator(mediator);

    // Remove the component.
    var removedMediator/*Puremvc.patterns.Mediator*/ = view.removeMediator('testing');

    // Assert that we have removed the appropriate Puremvc.patterns.Mediator
    YUITest.Assert.areEqual(
      'testing',
      removedMediator.getMediatorName(),
      "Expecting removedMediator.getMediatorName() == 'testing'"
      );

    // Assert that the Puremvc.patterns.Mediator is no longer retrievable.
    YUITest.Assert.isNull(
      view.retrieveMediator('testing'),
      "Expecting view.retrieveMediator('testing') === null)"
      );

    this.cleanup();
  },

  /**
   * Tests that the Puremvc.core.View calls the onRegister and onRemove methods.
   */
  testOnRegisterAndOnRemove: function() {
    // Get the Singleton Puremvc.core.View instance.
    var view/*Puremvc.core.View*/ = Puremvc.core.View.getInstance();

    // Create and register the test Puremvc.patterns.Mediator
    var mediator/*Puremvc.patterns.Mediator*/ = new ViewTestMediator4(this);
    view.registerMediator(mediator);

    // Assert that onRegister was called, and the Puremvc.patterns.Mediator responded by setting our boolean.
    YUITest.Assert.isTrue(
      this.onRegisterCalled,
      "Expecting onRegisterCalled === true"
      );

    // Remove the component.
    view.removeMediator(ViewTestMediator4.NAME);

    // Assert that the Puremvc.patterns.Mediator is no longer retrievable.
    YUITest.Assert.isTrue(
      this.onRemoveCalled,
      "Expecting onRemoveCalled === true"
      );

    this.cleanup();
  },

  /**
   * Tests successive register and remove of same Puremvc.patterns.Mediator.
   */
  testSuccessiveRegisterAndRemoveMediator: function() {
    // Get the Singleton Puremvc.core.View instance.
    var view/*Puremvc.core.View*/ = Puremvc.core.View.getInstance();

    // Create and register the test Puremvc.patterns.Mediator,
    // but not so we have a reference to it.
    view.registerMediator(new ViewTestMediator(this));

    // Test that we can retrieve it.
    YUITest.Assert.isInstanceOf(
      ViewTestMediator,
      view.retrieveMediator(ViewTestMediator.NAME),
      "Expecting view.retrieveMediator(ViewTestMediator.NAME) isInstanceOf ViewTestMediator"
      );

    // Remove the Puremvc.patterns.Mediator
    view.removeMediator(ViewTestMediator.NAME);

    // Test that retrieving it now returns null.
    YUITest.Assert.isNull(
      view.retrieveMediator(ViewTestMediator.NAME),
      "Expecting view.retrieveMediator(ViewTestMediator.NAME) === null"
      );

    // Test that removing the Puremvc.patterns.Mediator again once its gone doesn't cause crash .
    YUITest.Assert.isNull(
      view.removeMediator(ViewTestMediator.NAME),
      "Expecting view.removeMediator(ViewTestMediator.NAME) doesn't crash"
      );

    // Create and register another instance of the test Puremvc.patterns.Mediator.
    view.registerMediator(new ViewTestMediator(this));

    YUITest.Assert.isInstanceOf(
      ViewTestMediator,
      view.retrieveMediator(ViewTestMediator.NAME),
      "Expecting view.retrieveMediator(ViewTestMediator.NAME) is ViewTestMediator"
      );

    // Remove the Puremvc.patterns.Mediator
    view.removeMediator(ViewTestMediator.NAME);

    // Test that retrieving it now returns null.
    YUITest.Assert.isNull(
      view.retrieveMediator(ViewTestMediator.NAME),
      "Expecting view.retrieveMediator(ViewTestMediator.NAME) == null"
      );

    this.cleanup();
  },

  /**
   * Tests registering a Puremvc.patterns.Mediator for two different notifications, removing the
   * Puremvc.patterns.Mediator from the Puremvc.core.View, and seeing that neither notification causes the
   * Puremvc.patterns.Mediator to be notified. Added for the fix deployed in version 1.7
   */
  testRemoveMediatorAndSubsequentNotify: function() {
    // Get the Singleton Puremvc.core.View instance.
    var view/*Puremvc.core.View*/ = Puremvc.core.View.getInstance();

    // Create and register the test Puremvc.patterns.Mediator to be removed.
    view.registerMediator(new ViewTestMediator2(this));

    // Test that Puremvc.patterns.Notifications work.
    view.notifyObservers(new Puremvc.patterns.Notification(ViewTest.NOTE1));
    YUITest.Assert.areEqual(
      ViewTest.NOTE1,
      this.lastNotification,
      "Expecting lastNotification == NOTE1"
      );

    view.notifyObservers(new Puremvc.patterns.Notification(ViewTest.NOTE2));
    YUITest.Assert.areEqual(
      ViewTest.NOTE2,
      this.lastNotification,
      "Expecting lastNotification == NOTE2"
      );

    // Remove the Puremvc.patterns.Mediator
    view.removeMediator(ViewTestMediator2.NAME);

    // Test that retrieving it now returns null.
    YUITest.Assert.isNull(
      view.retrieveMediator(ViewTestMediator2.NAME),
      "Expecting view.retrieveMediator(ViewTestMediator2.NAME) === null"
      );

    // Test that Puremvc.patters.Notifications no longer work
    // (Puremvc.test.ViewTestMediator2 is the one that sets lastNotification
    // on this component, and Puremvc.test.ViewTestMediator)
    this.lastNotification = null;

    view.notifyObservers(new Puremvc.patterns.Notification(ViewTest.NOTE1));
    YUITest.Assert.areNotEqual(
      ViewTest.NOTE1,
      this.lastNotification,
      "Expecting lastNotification != NOTE1"
      );

    view.notifyObservers(new Puremvc.patterns.Notification(ViewTest.NOTE2));
    YUITest.Assert.areNotEqual(
      ViewTest.NOTE2,
      this.lastNotification,
      "Expecting lastNotification != NOTE2"
      );

    this.cleanup();
  },

  /**
   * Tests registering one of two registered Puremvc.patterns.Mediators and seeing
   * that the remaining one still responds.
   * Added for the fix deployed in version 1.7.1
   */
  testRemoveOneOfTwoMediatorsAndSubsequentNotify: function() {
    // Get the Singleton Puremvc.core.View instance.
    var view/*Puremvc.core.View*/ = Puremvc.core.View.getInstance();

    // Create and register a Puremvc.patterns.Mediator that responds to Puremvc.patterns.Notifications 1 and 2.
    view.registerMediator(new ViewTestMediator2(this));

    // Create and register a Puremvc.patterns.Mediator that responds to Puremvc.patterns.Notification 3.
    view.registerMediator(new ViewTestMediator3(this));

    // Test that all Puremvc.patterns.Notifications work.
    view.notifyObservers(new Puremvc.patterns.Notification(ViewTest.NOTE1));
    YUITest.Assert.areEqual(
      ViewTest.NOTE1,
      this.lastNotification,
      "Expecting lastNotification == NOTE1"
      );

    view.notifyObservers(new Puremvc.patterns.Notification(ViewTest.NOTE2));
    YUITest.Assert.areEqual(
      ViewTest.NOTE2,
      this.lastNotification,
      "Expecting lastNotification == NOTE2"
      );

    view.notifyObservers(new Puremvc.patterns.Notification(ViewTest.NOTE3));
    YUITest.Assert.areEqual(
      ViewTest.NOTE3,
      this.lastNotification,
      "Expecting lastNotification == NOTE3"
      );

    // Remove the Puremvc.patterns.Mediator that responds to 1 and 2.
    view.removeMediator(ViewTestMediator2.NAME);

    // Test that retrieving it now returns null.
    YUITest.Assert.isNull(
      view.retrieveMediator(ViewTestMediator2.NAME),
      "Expecting view.retrieveMediator(ViewTestMediator2.NAME) === null"
      );

    // Test that Puremvc.patterns.Notifications no longer work
    // for Puremvc.patterns.Notifications 1 and 2, but still work for 3.
    this.lastNotification = null;

    view.notifyObservers(new Puremvc.patterns.Notification(ViewTest.NOTE1));
    YUITest.Assert.areNotEqual(
      ViewTest.NOTE1,
      this.lastNotification,
      "Expecting lastNotification != NOTE1"
      );

    view.notifyObservers(new Puremvc.patterns.Notification(ViewTest.NOTE2));
    YUITest.Assert.areNotEqual(
      ViewTest.NOTE2,
      this.lastNotification,
      "Expecting lastNotification != NOTE2"
      );

    view.notifyObservers(new Puremvc.patterns.Notification(ViewTest.NOTE3));
    YUITest.Assert.areEqual(
      ViewTest.NOTE3,
      this.lastNotification,
      "Expecting lastNotification == NOTE3"
      );

    this.cleanup();
  },

  /**
   * Tests registering the same Puremvc.patterns.Mediator twice.
   * A subsequent Puremvc.patterns.Notification should only illicit
   * one response. Also, since reregistration
   * was causing two Puremvc.patterns.Observers to be created, ensure
   * that after removal of the Puremvc.patterns.Mediator there will
   * be no further response.
   *
   * Added for the fix deployed in version 2.0.4
   */
  testMediatorReregistration: function() {
    // Get the Singleton Puremvc.core.View instance.
    var view/*Puremvc.core.View*/ = Puremvc.core.View.getInstance();

    // Create and register that responds to Puremvc.patterns.Notification 5.
    view.registerMediator(new ViewTestMediator5(this));

    // Try to register another instance of that Puremvc.patterns.Mediator (uses the same NAME constant).
    view.registerMediator(new ViewTestMediator5(this));

    // Test that the counter is only incremented once (Puremvc.patterns.Mediator 5's response).
    this.counter = 0;
    view.notifyObservers(new Puremvc.patterns.Notification(ViewTest.NOTE5));
    YUITest.Assert.areEqual(
      1,
      this.counter,
      "Expecting counter == 1"
      );

    // Remove the Puremvc.patterns.Mediator
    view.removeMediator(ViewTestMediator5.NAME);

    // Test that retrieving it now returns null.
    YUITest.Assert.isNull(
      view.retrieveMediator(ViewTestMediator5.NAME),
      "Expecting view.retrieveMediator(ViewTestMediator5.NAME) === null"
      );

    // Test that the counter is no longer incremented.
    this.counter = 0;
    view.notifyObservers(new Puremvc.patterns.Notification(ViewTest.NOTE5));
    YUITest.Assert.areEqual(
      0,
      this.counter,
      "Expecting counter == 0"
      );
  },

  /**
   * Tests the ability for the Puremvc.patterns.Observer list to
   * be modified during the process of Puremvc.patterns.Notification,
   * and all Puremvc.patterns.Observers be properly notified. This
   * happens most often when multiple Puremvc.patterns.Mediators
   * respond to the same Puremvc.patterns.Notification by removing
   * themselves.
   *
   * Added for the fix deployed in version 2.0.4
   */
  testModifyObserverListDuringNotification: function() {
    // Get the Singleton Puremvc.core.View instance.
    var view/*Puremvc.core.View*/ = Puremvc.core.View.getInstance();

    // Create and register several Puremvc.patterns.Mediator instances that respond to Puremvc.patterns.Notification 6
    // by removing themselves, which will cause the Puremvc.patterns.Observer list for that Puremvc.patterns.Notification
    // to change. Versions prior to Standard Version 2.0.4 will see every other Puremvc.patterns.Mediator
    // fail to be notified.
    view.registerMediator(new ViewTestMediator6(ViewTestMediator6.NAME + "/1", this));
    view.registerMediator(new ViewTestMediator6(ViewTestMediator6.NAME + "/2", this));
    view.registerMediator(new ViewTestMediator6(ViewTestMediator6.NAME + "/3", this));
    view.registerMediator(new ViewTestMediator6(ViewTestMediator6.NAME + "/4", this));
    view.registerMediator(new ViewTestMediator6(ViewTestMediator6.NAME + "/5", this));
    view.registerMediator(new ViewTestMediator6(ViewTestMediator6.NAME + "/6", this));
    view.registerMediator(new ViewTestMediator6(ViewTestMediator6.NAME + "/7", this));
    view.registerMediator(new ViewTestMediator6(ViewTestMediator6.NAME + "/8", this));

    // Clear the counter.
    this.counter = 0;

    // Send the Puremvc.patterns.Notification. Each of the above Puremvc.patterns.Mediators will respond by removing
    // themselves and incrementing the counter by 1. This should leave us with a
    // count of eight, since eight Puremvc.patterns.Mediators will respond.
    view.notifyObservers(new Puremvc.patterns.Notification(ViewTest.NOTE6));

    // Verify the count is correct.
    YUITest.Assert.areEqual(
      8,
      this.counter,
      "Expecting counter == 8"
      );

    // Clear the counter.
    this.counter = 0;
    view.notifyObservers(new Puremvc.patterns.Notification(ViewTest.NOTE6));

    // Verify the count is 0.
    YUITest.Assert.areEqual(
      0,
      this.counter,
      "Expecting counter == 0"
      );

  },

  /**
   * @private
   */
  cleanup: function() {
    Puremvc.core.View.getInstance().removeMediator(ViewTestMediator.NAME);
    Puremvc.core.View.getInstance().removeMediator(ViewTestMediator2.NAME);
    Puremvc.core.View.getInstance().removeMediator(ViewTestMediator3.NAME);
  }
});

Ext.apply(Puremvc.test.ViewTest,
/**
 * @lends Puremvc.test.ViewTest
 */
{
  /**
   * @type {String}
   * @memberof Puremvc.test.ViewTest
   * @constant
   */
  NOTE1: "Notification1",

  /**
   * @type {String}
   * @memberof Puremvc.test.ViewTest
   * @constant
   */
  NOTE2: "Notification2",

  /**
   * @type {String}
   * @memberof Puremvc.test.ViewTest
   * @constant
   */
  NOTE3: "Notification3",

  /**
   * @type {String}
   * @memberof Puremvc.test.ViewTest
   * @constant
   */
  NOTE4: "Notification4",

  /**
   * @type {String}
   * @memberof Puremvc.test.ViewTest
   * @constant
   */
  NOTE5: "Notification5",

  /**
   * @type {String}
   * @memberof Puremvc.test.ViewTest
   * @constant
   */
  NOTE6: "Notification6"
});

Alias('Puremvc.test.ViewTest');
