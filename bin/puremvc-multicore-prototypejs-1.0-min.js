var Facade=Class.create({view:null,model:null,controller:null,initialize:function(a){if(Facade.instanceMap[a]){throw Error(Facade.MULTITON_MSG);
}this.initializeNotifier(a);Facade.instanceMap[a]=this;this.initializeFacade();},initializeFacade:function(){this.initializeModel();
this.initializeController();this.initializeView();},initializeModel:function(){if(!this.model){this.model=Model.getInstance(this.multitonKey);
}},initializeController:function(){if(!this.controller){this.controller=Controller.getInstance(this.multitonKey);
}},initializeView:function(){if(!this.view){this.view=View.getInstance(this.multitonKey);
}},registerCommand:function(a,b){this.controller.registerCommand(a,b);},removeCommand:function(a){this.controller.removeCommand(a);
},hasCommand:function(a){return this.controller.hasCommand(a);},registerProxy:function(a){this.model.registerProxy(a);
},retrieveProxy:function(a){return this.model.retrieveProxy(a);},removeProxy:function(a){return this.model.removeProxy(a);
},hasProxy:function(a){return this.model.hasProxy(a);},registerMediator:function(a){this.view.registerMediator(a);
},retrieveMediator:function(a){return this.view.retrieveMediator(a);},removeMediator:function(a){return this.view.removeMediator(a);
},hasMediator:function(a){return this.view.hasMediator(a);},sendNotification:function(b,a,c){this.notifyObservers(new Notification(b,a,c));
},notifyObservers:function(a){this.view.notifyObservers(a);},initializeNotifier:function(a){this.multitonKey=a;
}});Facade.MULTITON_MSG="Facade instance for this multiton key already constructed!";
Facade.instanceMap={};Facade.getInstance=function(a){if(!Facade.instanceMap[a]){Facade.instanceMap[a]=new Facade(a);
}return Facade.instanceMap[a];};Facade.hasCore=function(a){return Facade.instanceMap[a]?true:false;
};Facade.removeCore=function(a){if(!Facade.instanceMap[a]){return;}Model.removeModel(a);
View.removeView(a);Controller.removeController(a);delete Facade.instanceMap[a];};
var Notification=Class.create({name:null,body:null,type:null,initialize:function(b,a,c){this.name=b;
this.body=a;this.type=c;},getName:function(){return this.name;},setBody:function(a){this.body=a;
},getBody:function(){return this.body;},setType:function(a){this.type=a;},getType:function(){return this.type;
},toString:function(){var a="Notification Name: "+this.getName();a+="\nBody:"+((this.getBody()==null)?"null":this.getBody().toString());
a+="\nType:"+((this.getType()==null)?"null":this.getType());return a;}});var Notifier=Class.create({multitonKey:null,initializeNotifier:function(a){this.multitonKey=a;
},sendNotification:function(b,a,c){if(this.facade()){this.facade().sendNotification(b,a,c);
}},facade:function(){if(this.multitonKey==null){throw Error(Notifier.MULTITON_MSG);
}return Facade.getInstance(this.multitonKey);}});Notifier.MULTITON_MSG="multitonKey for this Notifier not yet initialized!";
var Observer=Class.create({notify:null,context:null,initialize:function(a,b){this.setNotifyMethod(a);
this.setNotifyContext(b);},getNotifyMethod:function(){return this.notify;},setNotifyMethod:function(a){this.notify=a;
},getNotifyContext:function(){return this.context;},setNotifyContext:function(a){this.context=a;
},notifyObserver:function(a){this.getNotifyMethod().call(this.getNotifyContext(),a);
},compareNotifyContext:function(a){return a===this.getNotifyContext();}});var Controller=Class.create({view:null,commandMap:null,multitonKey:null,initialize:function(a){if(Controller.instanceMap[a]){throw Error(MULTITON_MSG);
}Controller.instanceMap[a]=this;this.multitonKey=a;this.commandMap={};this.initializeController();
},initializeController:function(){this.view=View.getInstance(this.multitonKey);},executeCommand:function(a){var c=this.commandMap[a.getName()];
if(c){var b=new c();b.initializeNotifier(this.multitonKey);b.execute(a);}},registerCommand:function(a,b){if(!this.commandMap[a]){this.view.registerObserver(a,new Observer(this.executeCommand,this));
}this.commandMap[a]=b;},hasCommand:function(a){return this.commandMap[a]?true:false;
},removeCommand:function(a){if(this.hasCommand(a)){this.view.removeObserver(a,this);
delete this.commandMap[a];}}});Controller.MULTITON_MSG="Controller instance for this multiton key already constructed!";
Controller.instanceMap={};Controller.getInstance=function(a){if(!Controller.instanceMap[a]){Controller.instanceMap[a]=new Controller(a);
}return Controller.instanceMap[a];};Controller.removeController=function(a){delete Controller.instanceMap[a];
};var Model=Class.create({proxyMap:null,initialize:function(a){if(Model.instanceMap[a]){throw Error(Model.MULTITON_MSG);
}Model.instanceMap[a]=this;this.multitonKey=a;this.proxyMap={};this.initializeModel();
},initializeModel:function(){},registerProxy:function(a){a.initializeNotifier(this.multitonKey);
this.proxyMap[a.getProxyName()]=a;a.onRegister();},retrieveProxy:function(a){return this.proxyMap[a]||null;
},hasProxy:function(a){return this.proxyMap[a]?true:false;},removeProxy:function(b){var a=this.proxyMap[b];
if(!a){return null;}delete this.proxyMap[b];a.onRemove();return a;}});Model.SINGLETON_MSG="Model Singleton already constructed!";
Model.instanceMap={};Model.getInstance=function(a){if(!Model.instanceMap[a]){Model.instanceMap[a]=new Model(a);
}return Model.instanceMap[a];};Model.removeModel=function(a){delete Model.instanceMap[a];
};var View=Class.create({mediatorMap:null,observerMap:null,multitonKey:null,initialize:function(a){if(View.instanceMap[a]){throw Error(View.MULTITON_MSG);
}View.instanceMap[a]=this;this.multitonKey=a;this.mediatorMap={};this.observerMap={};
this.initializeView();},initializeView:function(){},registerObserver:function(b,a){var c=this.observerMap[b];
if(c){c.push(a);}else{this.observerMap[b]=[a];}},notifyObservers:function(e){var c=e.getName();
var g=this.observerMap[c];if(g){var f=g.slice(0);var a=f.length;for(var d=0;d<a;d++){var b=f[d];
b.notifyObserver(e);}}},removeObserver:function(b,d){var e=this.observerMap[b];var c=e.length;
while(c--){var a=e[c];if(a.compareNotifyContext(d)){e.splice(c,1);break;}}if(e.length==0){delete this.observerMap[b];
}},registerMediator:function(e){var c=e.getMediatorName();if(this.mediatorMap[c]){return;
}e.initializeNotifier(this.multitonKey);this.mediatorMap[c]=e;var f=e.listNotificationInterests();
var a=f.length;if(a>0){var b=new Observer(e.handleNotification,e);for(var d=0;d<a;
d++){this.registerObserver(f[d],b);}}e.onRegister();},retrieveMediator:function(a){return this.mediatorMap[a]||null;
},hasMediator:function(a){return this.mediatorMap[a]?true:false;},removeMediator:function(a){var c=this.mediatorMap[a];
if(!c){return null;}var d=c.listNotificationInterests();var b=d.length;while(b--){this.removeObserver(d[b],c);
}delete this.mediatorMap[a];c.onRemove();return c;}});View.MULTITON_MSG="View instance for this multiton key already constructed!";
View.instanceMap={};View.getInstance=function(a){if(!View.instanceMap[a]){View.instanceMap[a]=new View(a);
}return View.instanceMap[a];};View.removeView=function(a){delete View.instanceMap[a];
};var MacroCommand=Class.create(Notifier,{subCommands:null,initialize:function(){this.subCommands=[];
this.initializeMacroCommand();},initializeMacroCommand:function(){},addSubCommand:function(a){this.subCommands.push(a);
},execute:function(a){while(this.subCommands.length>0){var c=this.subCommands.shift();
var b=new c();b.initializeNotifier(this.multitonKey);b.execute(a);}}});var SimpleCommand=Class.create(Notifier,{execute:function(a){}});
var Mediator=Class.create(Notifier,{mediatorName:null,viewComponent:null,initialize:function(a,b){this.mediatorName=(a!=null)?a:Mediator.NAME;
this.viewComponent=b;},listNotificationInterests:function(){return[];},getMediatorName:function(){return this.mediatorName;
},getViewComponent:function(){return this.viewComponent;},setViewComponent:function(a){this.viewComponent=a;
},handleNotification:function(a){},onRegister:function(){},onRemove:function(){}});
Mediator.NAME="Mediator";var Proxy=Class.create(Notifier,{data:null,proxyName:null,initialize:function(b,a){this.proxyName=(b!=null)?b:Proxy.NAME;
if(a!=null){this.setData(a);}},getProxyName:function(){return this.proxyName;},setData:function(a){this.data=a;
},getData:function(){return this.data;},onRegister:function(){},onRemove:function(){}});
Proxy.NAME="Proxy";